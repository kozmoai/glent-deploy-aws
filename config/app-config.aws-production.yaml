app:
  title: AWS ${BACKSTAGE_TITLE}
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: ${PROTOCOL}://${BACKSTAGE_HOSTNAME}
  logo: https://companieslogo.com/img/orig/AMZN_BIG-accd00da.png
  logoIcon: https://companieslogo.com/img/orig/AMZN.D-13fddc58.png

organization:
  name: ${CUSTOMER_NAME}

backend:
  platformRegion: ${AWS_REGION}
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: ${PROTOCOL}://${BACKSTAGE_HOSTNAME}
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen:
    port: 8080

  auth:
    keys:
      - secret: ${BACKSTAGE_SECRET}

  csp:
    connect-src: ["'self'", "http:", "https:"]
    img-src: ["'self'", "https://companieslogo.com"]

  cors:
    origin: ${PROTOCOL}://${BACKSTAGE_HOSTNAME}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true

  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt
  reading:
    allow:
      - host: ${SSM_GITLAB_HOSTNAME}
auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  session:
    secret: ${BACKSTAGE_SECRET}
  environment: development
  providers:
    okta:
      development:
        clientId: ${OKTA_CLIENT_ID}
        clientSecret: ${OKTA_CLIENT_SECRET}
        audience: ${OKTA_ORG_URL}
        # authServerId: ${AUTH_OKTA_AUTH_SERVER_ID}
        # idp: ${AUTH_OKTA_IDP}
        # additionalScopes: ${AUTH_OKTA_ADDITIONAL_SCOPES}

integrations:
  gitlab:
    - host: ${SSM_GITLAB_HOSTNAME}
      apiBaseUrl: https://${SSM_GITLAB_HOSTNAME}/api/v4
      baseUrl: https://${SSM_GITLAB_HOSTNAME}
      token: ${GITLAB_ADMIN_TOKEN}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: ${BACKSTAGE_SCAFFOLDER_NAME}
    email: ${BACKSTAGE_SCAFFOLDER_EMAIL}

gitlab:
  allowedKinds:
    - Component
    - Resource
    - AWSEnvironmentProvider

catalog:
  # Overrides the default list locations from app-config.yaml as these contain example data.
  # See https://backstage.io/docs/features/software-catalog/software-catalog-overview#adding-components-to-the-catalog for more details
  # on how to get entities into the catalog.
  rules:
    - allow:
        [
          Domain,
          Component,
          System,
          API,
          Resource,
          Location,
          Template,
          AWSEnvironment,
          AWSEnvironmentProvider,
        ]
  locations:
    # AWS templates
    - type: url
      target: https://${SSM_GITLAB_HOSTNAME}/glent-admin/backstage-reference/-/blob/main/templates/all-templates.yaml
      rules:
        - allow: [Location, Template]
  providers:
    okta:
      - orgUrl: ${OKTA_ORG_URL}
        token: ${OKTA_API_TOKEN}
        # userFilter: profile.department eq "engineering"
        # groupFilter: profile.name eq "Everyone"
    gitlab:
      glent:
        host: ${SSM_GITLAB_HOSTNAME}
        branch: main
        fallbackBranch: main
        skipForkedRepos: false
        # group: example-org/teams # Required for user ingestion.  Group and subgroup (if needed) to look for users.
        entityFilename: .backstage/catalog-info.yaml
        projectPattern: '[\s\S]*'
        schedule:
          frequency: { minutes: 15 }
          timeout: { minutes: 3 }
